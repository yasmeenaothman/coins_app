// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/t_currency.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8155731228282267258),
      name: 'Currency',
      lastPropertyId: const IdUid(10, 3344507377972112903),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 733265298940398381),
            name: 'pkIId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 5979794922604453605),
            name: 'sCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1732214640388366729),
            name: 'sName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5287257488944627962),
            name: 'dValue',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3002773130519245543),
            name: 'dTrading',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6787473047687408715),
            name: 'sIcon',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3344507377972112903),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 8155731228282267258),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        436491808736956399,
        7932549643354334874,
        7846423218625333818
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Currency: EntityDefinition<Currency>(
        model: _entities[0],
        toOneRelations: (Currency object) => [],
        toManyRelations: (Currency object) => {},
        getId: (Currency object) => object.id,
        setId: (Currency object, int id) {
          object.id = id;
        },
        objectToFB: (Currency object, fb.Builder fbb) {
          final sCodeOffset = fbb.writeString(object.sCode);
          final sNameOffset = fbb.writeString(object.sName);
          final dValueOffset = fbb.writeString(object.dValue);
          final dTradingOffset = fbb.writeString(object.dTrading);
          final sIconOffset = fbb.writeString(object.sIcon);
          fbb.startTable(11);
          fbb.addInt64(0, object.pkIId);
          fbb.addOffset(1, sCodeOffset);
          fbb.addOffset(2, sNameOffset);
          fbb.addOffset(3, dValueOffset);
          fbb.addOffset(4, dTradingOffset);
          fbb.addOffset(5, sIconOffset);
          fbb.addInt64(9, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Currency(
              pkIId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              sCode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              sName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              dValue: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              dTrading: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              sIcon: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Currency] entity fields to define ObjectBox queries.
class Currency_ {
  /// see [Currency.pkIId]
  static final pkIId =
      QueryIntegerProperty<Currency>(_entities[0].properties[0]);

  /// see [Currency.sCode]
  static final sCode =
      QueryStringProperty<Currency>(_entities[0].properties[1]);

  /// see [Currency.sName]
  static final sName =
      QueryStringProperty<Currency>(_entities[0].properties[2]);

  /// see [Currency.dValue]
  static final dValue =
      QueryStringProperty<Currency>(_entities[0].properties[3]);

  /// see [Currency.dTrading]
  static final dTrading =
      QueryStringProperty<Currency>(_entities[0].properties[4]);

  /// see [Currency.sIcon]
  static final sIcon =
      QueryStringProperty<Currency>(_entities[0].properties[5]);

  /// see [Currency.id]
  static final id = QueryIntegerProperty<Currency>(_entities[0].properties[6]);
}
